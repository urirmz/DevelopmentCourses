
Git
Git is a version control system to keep track of your code. 
You can turn a folder into a repository typing git init in the terminal from it. The git init command creates a .git folder for you. It's what keeps track of all the things in your repository. 
Use git status to see the status of where you are
There's two steps to make git keep track of it for you. First you need to add it to the staging area like this: git add file_name. Now your file is in staging and will be added with the next commit. you can use git add . to add all files to staging.
To commit your files use git commit -m "Initial commit". The -m stands for "message". Often times, the first commit of a repo will have the message "Initial commit". When you make a commit, whatever is in the staging area will be added to your git history. Commit messages often start with fix: or feat:, among others, to help people understand what your commit was fo
You can see your commit history with git log. The flag --oneline makes it more readable. You can view the last x number of commits with any number, like git log -x
You can see the changes you made on files with git diff
The lines with + in front means that those lines were added.

Branches
A git repository has branches to help keep track of things you are doing with your code. It's common to have a main branch which might be for your production code, and other branches for adding new features or fixing bugs. You can create and go to a new branch with git checkout -b new_branch. The -b stands for "branch"
You can create a branch with git branch branch_name. Branches often start with fix/ or feat/, among others, like commit messages, but they use a forward slash and can't contain spaces. When you create a branch, your new branch is a clone of the main branch since that's the branch you were on when you created it
Type git branch to see the current branches in your repo.
To switch to a branch use: git checkout branch_name
You often don't want to make commits directly to the main branch of a repo. This branch will be for some new changes. What you will do is make the changes and commits here, then merge them into the main branch when they are ready
You can use git merge branch_name to bring changes from a branch into the branch you are currently on.
You can delete a branch with git branch -d branch_name. -d stands for "delete".
You need to update this branch so it has the same commits from main, but you can't just merge that branch into this one. You need that bug fix commit to be in the same order here as it is on main, right after the "drop table" commit. You need to rebase this branch against main to do that. Enter git rebase main to rebase this branch. To be more specific, a rebase will "rewind" this branch to where it last matched main, then, add the commits from main that aren't here. After that, it adds the commits you made to this branch on top.
If both commits modify the same row in a rebase, it will be a conflict. You need to solve the conflict manually and then run "git rebase --continue"

Stash
You can put your changes aside with git stash. Stash your changes so you can add them to a different branch. 
You can view the things you have stashed with git stash list or a view a condensed version of the changes in the latest stash with git stash show. View the full changes of the latest stash with git stash show -p. -p stands for "patch".
You can bring the changes back with git stash pop.  
You can add the latest stash while keeping it in the list with git stash apply
You can use the name at the front of each stash (stash@{#}) with many of the stash commands to select one other than the latest one
You can delete a stash with git stash drop or git stash drop <stash_name>

Commits
There are few ways to remove or undo a commit. The first is to simply "travel back in time". You can use the git reset command to travel to any point in your commit history. Your current HEAD is a reference to the last commit you just made. Use git reset HEAD~1 to go back one before HEADS
When you reset to one commit, it removed the most recent commit, and put all the changes in the working tree. If you used the --hard flag with the reset, the changes would have not been added to the working tree and if you used the --soft flag, the changes would have been added to the working tree and to staging.
Reverting is a good way to undo a commit because you don't lose the commit from the history. You can revert the most recent commit (HEAD) with git revert HEAD
Enter git show into the terminal to see the last commit added
You can enter an "interactive" mode to manipulate commits. Type git rebase --interactive HEAD~2 into the terminal to enter this mode. At the top of Nano, you can see the two commits with pick next to them. Below them, there's a list of options for working with them. pick means that it will use the commits as they were. At the bottom, it says, d, drop = remove commit. Replace the word pick preceeding your two commits with a d to drop them both. 
git rebase --interactive --root means that the rebase will go back to your very first commit.
Look at the commit hash for your Initial commit from the last two times you viewed the log, it's that string left of the log. They aren't the same anymore since you rebased back to the root. Same goes for the rest of the commits. When you rebase interactively it changes all those hashes, so git sees them as different commits. If you were to try and merge this into main, it wouldn't work because they don't share the same history anymore. For this reason, you don't want to do an interactive rebase where you go back passed commits unique to the branch you are on. Fortunately, you can fix this. Enter git rebase main to realign the history of the two branches.
Squashing commits means that you will take a bunch of commits and turn them into one. This is helpful to keep your commit history clean and something you want try to do.

Gitignore
.env files are used to store environment variables for running code. Often times, there may be sensitive information in it. 
There are often a number of things you don't want to include in a repository, especially if it's publicly visible. You can avoid uploading them to git by placing their path into .gitignore file 